syntax = "proto3";



option java_multiple_files = true;
option java_package = "io.gnss-pdft.ublox_control";
option java_outer_classname = "UbloxControlProto";
option objc_class_prefix = "UBXCTL";

package ubloxcontrol;

import "google/protobuf/struct.proto"; // standard type for JSON data structures

// Interface exported by the server connected to the ublox chip
service UbloxControl {
  // A simple RPC.
  //
  // Obtains the feature at a given position.
  //
  // A feature with an empty name is returned if there's no feature at the given
  // position.
  rpc GetFeature(Point) returns (Feature) {}

  // A server-to-client streaming RPC.
  //
  // Obtains the Features available within the given Rectangle.  Results are
  // streamed rather than returned at once (e.g. in a response message with a
  // repeated field), as the rectangle may cover a large area and contain a
  // huge number of features.
  rpc ListFeatures(Rectangle) returns (stream Feature) {}

  // A client-to-server streaming RPC.
  //
  // Accepts a stream of Points on a route being traversed, returning a
  // RouteSummary when traversal is completed.
  rpc RecordRoute(stream Point) returns (RouteSummary) {}

  // A Bidirectional streaming RPC.
  //
  // Accepts a stream of RouteNotes sent while a route is being traversed,
  // while receiving other RouteNotes (e.g. from other users).
  rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}

  // Configure ZED-F9T chip and verify all desired packets are being received.
  rpc InitF9t(F9tConfig) returns (InitSummary) {}
}

// Points are represented as latitude-longitude pairs in the E7 representation
// (degrees multiplied by 10**7 and rounded to the nearest integer).
// Latitudes should be in the range +/- 90 degrees and longitude should be in
// the range +/- 180 degrees (inclusive).
message Point {
  int32 latitude = 1;
  int32 longitude = 2;
}

// A latitude-longitude rectangle, represented as two diagonally opposite
// points "lo" and "hi".
message Rectangle {
  // One corner of the rectangle.
  Point lo = 1;

  // The other corner of the rectangle.
  Point hi = 2;
}

// A feature names something at a given point.
//
// If a feature could not be named, the name is empty.
message Feature {
  // The name of the feature.
  string name = 1;

  // The point where the feature is detected.
  Point location = 2;
}

// A RouteNote is a message sent while at a given point.
message RouteNote {
  // The location from which the message is sent.
  Point location = 1;

  // The message to be sent.
  string message = 2;
}

// A RouteSummary is received in response to a RecordRoute rpc.
//
// It contains the number of individual points received, the number of
// detected features, and the total distance covered as the cumulative sum of
// the distance between each point.
message RouteSummary {
  // The number of points received.
  int32 point_count = 1;

  // The number of known features passed while traversing the route.
  int32 feature_count = 2;

  // The distance covered in metres.
  int32 distance = 3;

  // The duration of the traversal in seconds.
  int32 elapsed_time = 4;
}

// A F9tConfig is sent by the InitF9t RPC.
//
// It contains a JSON object specifying F9t configuration.
message F9tConfig {
  // JSON-formatted configuration for an F9T
  google.protobuf.Struct config = 1;
}


message TestResult {
  enum Result {
    // default state
    UNDEFINED = 0;
    // the test passed
    PASS = 1;
    // the test failed
    FAIL = 2;
  }

  // test name
  string name = 1;

  // test result
  Result result = 2;

  // error message
  string message = 3;
}

// A InitSummary is returned by the InitF9t RPC.
//
// It returns information regarding the validity of the provided config file
// and which validation checks passed.
message InitSummary {
  enum Status {
    // default state
    UNDEFINED = 0;
    // the provided F9tConfig was invalid (see the message field for more)
    INVALID_CONFIG = 1;
    // the device was successfully configured and passed all validation checks
    SUCCESS = 2;
    // at least one verification test failed
    FAILURE = 3;
  }
  Status status = 1;

  // any message regarding the initialization operation
  string message = 2;

  // return the updated f9t state after initialization
  google.protobuf.Struct f9t_state = 3;

  // test results
  repeated TestResult test_results = 4;
}